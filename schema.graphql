schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type FuforeTickets {
  date: String!
  deviceName: String!
  fee: Int!
  id: ID!
  itemType: String!
  receiptType: String!
}

type ModelFuforeTicketsConnection {
  items: [FuforeTickets]
  nextToken: String
}

type Mutation {
  createFuforeTickets(condition: ModelFuforeTicketsConditionInput, input: CreateFuforeTicketsInput!): FuforeTickets
  deleteFuforeTickets(condition: ModelFuforeTicketsConditionInput, input: DeleteFuforeTicketsInput!): FuforeTickets
  updateFuforeTickets(condition: ModelFuforeTicketsConditionInput, input: UpdateFuforeTicketsInput!): FuforeTickets
}

type Query {
  getFuforeTickets(id: ID!): FuforeTickets
  listFuforeTicketss(filter: ModelFuforeTicketsFilterInput, limit: Int, nextToken: String): ModelFuforeTicketsConnection
}

type Subscription {
  onCreateFuforeTickets: FuforeTickets @aws_subscribe(mutations : ["createFuforeTickets"])
  onDeleteFuforeTickets: FuforeTickets @aws_subscribe(mutations : ["deleteFuforeTickets"])
  onUpdateFuforeTickets: FuforeTickets @aws_subscribe(mutations : ["updateFuforeTickets"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateFuforeTicketsInput {
  date: String!
  deviceName: String!
  fee: Int!
  id: ID
  itemType: String!
  receiptType: String!
}

input DeleteFuforeTicketsInput {
  id: ID
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelFuforeTicketsConditionInput {
  and: [ModelFuforeTicketsConditionInput]
  date: ModelStringInput
  deviceName: ModelStringInput
  fee: ModelIntInput
  itemType: ModelStringInput
  not: ModelFuforeTicketsConditionInput
  or: [ModelFuforeTicketsConditionInput]
  receiptType: ModelStringInput
}

input ModelFuforeTicketsFilterInput {
  and: [ModelFuforeTicketsFilterInput]
  date: ModelStringInput
  deviceName: ModelStringInput
  fee: ModelIntInput
  id: ModelIDInput
  itemType: ModelStringInput
  not: ModelFuforeTicketsFilterInput
  or: [ModelFuforeTicketsFilterInput]
  receiptType: ModelStringInput
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input UpdateFuforeTicketsInput {
  date: String
  deviceName: String
  fee: Int
  id: ID!
  itemType: String
  receiptType: String
}
